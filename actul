#!/bin/bash

# Ensure Python3 is installed and accessible
PYTHON=$(which python3)

# Define Python script inline
PYTHON_SCRIPT=$(cat <<EOF
import os
import argparse
import numpy as np
import xml.etree.ElementTree as ET
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array

# Function to load and preprocess images
def load_images(image_dir, user_ids):
    images = []
    for user_id in user_ids:
        img_path = os.path.join(image_dir, f"{user_id}.jpg")
        if os.path.exists(img_path):
            img = load_img(img_path, target_size=(128, 128))  # Resize images to match model input
            img_array = img_to_array(img) / 255.0  # Normalize pixel values
            images.append(img_array)
        else:
            print(f"Warning: Image {img_path} not found.")
    return np.array(images)

# Function to generate fake trait values for demo purposes
def generate_personality_traits():
    return {
        "extrovert": round(np.random.uniform(2.5, 5.0), 2),
        "neurotic": round(np.random.uniform(2.5, 5.0), 2),
        "agreeable": round(np.random.uniform(2.5, 5.0), 2),
        "conscientious": round(np.random.uniform(2.5, 5.0), 2),
        "open": round(np.random.uniform(2.5, 5.0), 2)
    }

# Function to write XML output
def write_xml(user_id, age_group, gender, traits, output_dir):
    # Create XML structure
    user = ET.Element("user", attrib={
        "id": user_id,
        "age_group": age_group,
        "gender": "female" if gender == 1 else "male",
        "extrovert": str(traits["extrovert"]),
        "neurotic": str(traits["neurotic"]),
        "agreeable": str(traits["agreeable"]),
        "conscientious": str(traits["conscientious"]),
        "open": str(traits["open"])
    })
    # Write to XML file
    tree = ET.ElementTree(user)
    output_path = os.path.join(output_dir, f"{user_id}.xml")
    tree.write(output_path)

# Main function
def main(input_dir, output_dir):
    # Ensure output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Load model
    model_path = os.path.expanduser("~/model2.pth")
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found at {model_path}")
    model = load_model(model_path)
    
    # Load user IDs from input directory
    user_ids = [file.split('.')[0] for file in os.listdir(input_dir) if file.endswith(".jpg")]

    # Load and preprocess images
    images = load_images(input_dir, user_ids)
    
    # Predict gender
    predictions = model.predict(images)
    predicted_genders = np.argmax(predictions, axis=1)
    
    # Generate XML output for each user
    for user_id, gender in zip(user_ids, predicted_genders):
        # Assign random age group for demonstration (modify as needed)
        age_group = "xx-24"  # Placeholder age group
        traits = generate_personality_traits()
        write_xml(user_id, age_group, gender, traits, output_dir)
    print(f"Prediction and XML generation complete. Results saved to {output_dir}")

# Parse command-line arguments
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Gender Prediction Script")
    parser.add_argument("-i", "--input", required=True, help="Path to input test data (directory containing .jpg files)")
    parser.add_argument("-o", "--output", required=True, help="Path to output directory for XML files")
    args = parser.parse_args()
    main(args.input, args.output)
EOF
)

# Run the Python code
$PYTHON -c "$PYTHON_SCRIPT" "$@"
